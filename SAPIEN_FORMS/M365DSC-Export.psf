<File version="3.2">
  <FileID>69fe4b7b-0e9e-4492-8c21-ca7bb6cd077e</FileID>
  <Preview>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
nHwKAGYdCoDnme0FwH5oUWdnl7Ky85WbVwg4kW0KQFdXd/B4m+pxCPwSUQA8z2wvAJa9L/Yb20ZH
RwAn7OPrl/Q3A7wLCoDnoQAAAFygAHgeCgAAwAUKgOehAAAAXKAAeB4KAADABQqA56EAAABcoAB4
HgoAAMAFCoDnoQCMP0jttxmOjQFu2McXpRmzDQXA80x3ARga/v5jfG1Ghn44zfSxA7c0OjzVde/G
fjCLvT/5BcWBgsISYFpNPLZ6enr4ICDMKhQAzzOdBcBu3PrbaxV+/rROnDih81ej1Towai5/dbpp
YZY/3N+tx6Xpauoyp3/iMia+CyAzK09tbR1qawemmXlcpWfm8lHAmHUoAJ5nOguA3fevexSuJf+8
RCG3bmnH5o06+bA62EsPMjYaTDMR+yU+L2Ousxl58W1Co2ZD+XpeftHQy7n06rujnyn5mT099oP1
eRcTBaC8oiqYIyEuUlrGlwFh9qEAeJ7pLgBPk+/r8IqrwbThV45qy/FL+ubwXu3avk+JFXV6mhmj
7du36nRoknp7OxR2bJ82bdqulIJSpdxJ0POWal0Muara501KDEtXXvYDrVy+QgfvPFJbXZ42bdyo
yw+KVJz8nVYsXaA/fPIHPcypUd7DYvWbjevQa+v0NhMFgK8DJi5TzNcBYxaiAHie6S4ATTn39On/
/SstXrJEy9ef05OO5/ru0FL95V//Qat279DBHSv060/m6tStJFXn39Nv/vuvtGzTXsUmZuvu9fMK
iwnXH373Z0UnROvb4zu1dOsm3U1I18nTW7Vx2xb9ZsERVVela/2OnQp7EKOd6z5TyuMetTe1aWCK
dXobCgD5EKEAYDaiAHie6S4ATxKidGpj5PhWz6Qq7ZpWHD+rB9f2aNP2dYqMD9ftW6e1ZdFeJeem
6/rd2zqzY4uOnYpTfk68Vi9epuOXjmr5su2Kvn5UK3Zv0oCZT1LEUX20cr3WXc3UcH2stp44J/uK
wNXdXyi1MViUBgcGfrBOb0MBIB8iFADMRhQAzzPdBaDmUZzObo9Qrzlt3/3UXHpPqxau0PqvP9aK
nbt189tDWrZulRYvOaWi/HjtW7FIX3/6uU5+V6Te5hx9tWKTcp9kat2K5SpraFPsjWP6eO5iLdl/
WPfvXtbKs3EaG2nXuUPL9cmcj/TZZ18qKbda2Q+KeAmAeBsKAGYjCoDnmc4CYPX39ppfaM/L8yMj
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
PA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADg
AgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AA
AAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8
DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOAC
BcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAA
AC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwP
BQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIF
wPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAA
LlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8F
AADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA
81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAu
UAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUA
AOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDz
UAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5Q
ADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA
4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQ
AAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAA
PA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADg
AgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AA
AAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8
DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOAC
BcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAA
AC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwP
BQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIF
wPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAA
LlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8F
AADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA
81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAu
UAA8DwUAAOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUA
AOACBcDzUAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDz
UAAAAC5QADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5Q
ADwPBQAA4AIFwPNQAAAALlAAPA8FAADgAgXA81AAAAAuUAA8DwUAAOACBcDzUAAAAC5QADwPBQAA
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageExport)
	{
		#TODO: Enter Validation Code here for Export Tab
		
		return $true
	}
	elseif ($tabPage -eq $tabpageDeploy)
	{
		#TODO: Enter Validation Code here for Deploy Tab
		
		return $true
	}
	elseif ($tabPage -eq $tabpageAudit)
	{
		#TODO: Enter Validation Code here for Audit Tab
		return $true
	}
	#Add more pages here
	
	return $true
}


#region Control Helper Functions
<#
	.SYNOPSIS
		Checks/Unchecks all resource nodes for a selected workload
	
	.DESCRIPTION
		Checks/Unchecks all resource nodes for a selected workload
	
	.PARAMETER WorkloadNode
		A description of the WorkloadNode parameter.
	
	.EXAMPLE
				PS C:\> Check-ResourceNodes -WorkloadNode $node
	
	.NOTES
		Additional information about the function.
#>
function Check-ResourceNodes
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true,
				   Position = 1)]
		[System.Windows.Forms.TreeNode]$WorkloadNode
	)
	$selectedNodeText = $WorkloadNode.Text
	$nodesChecked = $WorkloadNode.Checked
	
	if ($selectedNodeText -in $M365DSCWorkloads)
	{
		$resourceNodesArr = $resourcesListTree.Nodes[$WorkloadNode.Index].Nodes.GetEnumerator()
		
		foreach ($node in $resourceNodesArr)
		{
			$node.Checked = $nodesChecked
		}
	}
}

function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

<#
	.SYNOPSIS
		This function creates the M365DSC Resource Node List
	
	.DESCRIPTION
		This function creates a TreeView list of M365DSC resource nodes categorized by workload
	
	.PARAMETER $Resources
		A description of the $Resources parameter.
	
	.PARAMETER $Workloads
		A description of the $Workloads parameter.
	
	.EXAMPLE
				PS C:\> Build-ResourceNodeList -$Resources $resources -$Workloads $workloads
	
#>
function Build-ResourceNodeList
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true,Position = 1)]
		[System.Array]$Resources,
		
		[Parameter(Mandatory = $true,Position = 2)]
		[System.Array]$Workloads
	)
	
	#
	# TODO: Optimize this function using Array Lists instead of arrays and 
	#       remove unnecessary resourceMappings Array
	#
	# TODO: Add ToolTipText functionality for each node
	#
	
	# First generate the resource to workload mappings
	$resourceMappings = @()
	foreach ($resource in $Resources)
	{
		$resourceMappings += Get-M365DSCWorkload $resource
	}
	
	# Build workload nodes
	foreach ($workload in $Workloads)
	{
		# Add the parent workload
		$resourcesListTree.Nodes.Add($workload)
		
		# Add the children resources for the current parent workload
		foreach ($mapping in $resourceMappings)
		{
			if ($workload -eq $mapping.WorkloadName)
			{
				$workloadIndex = [array]::IndexOf($Workloads, $workload)
				$resourcesListTree.Nodes[$workloadIndex].Nodes.Add($mapping.Resource)
			}
		}
	}
}

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	#$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}


#endregion

#region General Events and Functions
$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting = [System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting = [System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if ($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for ($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if ($_.Cancel)
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$formM365DSCSnapshot_Load = {
	
	Update-NavButtons
	
	# Generate TreeView of Workloads and their respective resources
	Build-ResourceNodeList $M365DSCResources $M365DSCWorkloads
}

$tabcontrolWizard_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$buttonFinish_Click = {
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}
#endregion

#region Export Events and Functions
$exportUsernameBox_TextChanged = {
	Update-NavButtons
}



$labelExportUserName_Click = {
	#TODO: Place custom script here
	
}

$labelEnterO365TenantCreds_Click = {
	#TODO: Place custom script here
	
}

$buttonExportPath_Click = {
	# Display Export File Path Dialog
	if ($exportFilePathDialog.ShowDialog() -eq 'OK')
	{
		$exportConfigPathBox.Text = $exportFilePathDialog.SelectedPath
	}
}

$buttonExport_Click = {
	# Build ArrayList of Checked Nodes
	$checkedNodes = New-Object System.Collections.ArrayList
	Get-CheckedNode $resourcesListTree.Nodes $checkedNodes
	
	# Parse out workloads from the checkedNodes ArrayList
	$configComponents = New-Object System.Collections.ArrayList
	foreach ($node in $checkedNodes)
	{
		$currNodeStr = (($node.ToString()).Split(':')[1]).Trim()
		if (-not ($M365DSCWorkloads.Contains($currNodeStr)))
		{
			$configComponents.Add($currNodeStr)
		}
	}
	
	# Define M365 Config object
	$configName = $boxConfigName.Text
	$fileName = $configName + ".ps1"
	$configObj = [M365Config]::New($fileName, $configComponents, $configName, $exportConfigPathBox.Text)
	
	# Grab creds entered in Text Boxes
	$username = $exportUsernameBox.Text
	$password = $exportPasswordBox.Text | ConvertTo-SecureString -AsPlainText -Force
	
	# Build source tenant creds object
	$srcCreds = [System.Management.Automation.PSCredential]::new($username, $password)
	Write-Host $srcCreds.UserName + "  " + $srcCreds.Password
	
	$res = $configObj.Export($srcCreds)
}

$resourcesListTree_AfterCheck = [System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	# Toggle all resource nodes if a workload is selected
	Check-ResourceNodes $_.Node
}

$resourcesListTree_AfterSelect = [System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	#TODO: Place custom script here
	
}
#endregion

#region Deploy Tab Events and Functions
$buttonDeployConfig_Click = {
	#TODO: Implement Error Handling
	
	# Define M365 Config object
	$configFilePath = $textboxDeployConfigFilePath.Text
	$fileName = Split-Path $configFilePath -Leaf
	$configName = $fileName.Split(".")[0]
	
	$configDirPath = Split-Path $configFilePath -Parent
	$configObj = [M365Config]::New($fileName, $configName, $configDirPath)
	
	# Grab creds entered in Text Boxes
	$username = $textboxDeployUsername.Text
	$password = $textboxDeployPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	
	# Build Destingation tenant creds object
	$destCreds = [System.Management.Automation.PSCredential]::new($username, $password)
	
	# Compile the config
	$res = $configObj.Compile($destCreds)
	
	if ($res -eq '0')
	{
		Write-Host "[+] Compilation completed."
	}
	
	# Deploy the compiled config
	$res = $configObj.Deploy()
	
	if ($res -eq '0')
	{
		Write-Host "[+] Deployment successful."
	}
}

$buttonDeployConfigPath_Click = {
	# Display Config File Dialog
	if ($deployConfigFilePickerDialog.ShowDialog() -eq 'OK')
	{
		$textboxDeployConfigFilePath.Text = $deployConfigFilePickerDialog.FileName
	}
}

#endregion
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>