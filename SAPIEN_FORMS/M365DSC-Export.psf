<File version="3.2">
  <FileID>69fe4b7b-0e9e-4492-8c21-ca7bb6cd077e</FileID>
  <Preview>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
AAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygA
nocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABw
gQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgA
AAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACe
hwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCB
AuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAA
ABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6H
AgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC
4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAA
FygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocC
AABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLg
eSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAX
KACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIA
AHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5
KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABco
AJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAA
cIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4Hko
AAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygA
nocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABw
gQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgA
AAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACe
hwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCB
AuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAA
ABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6H
AgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC
4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAA
FygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocC
AABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLg
eSgAAAAXKACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAX
KACehwIAAHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIA
AHCBAuB5KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5
KAAAABcoAJ6HAgAAcIEC4HkoAAAAFygAnocCAABwgQLgeSgAAAAXKACehwIAAHCBAuB5KAAAABco
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
4l/8/6oQVFvNnwHnAAAAAElFTkSuQmCC</Preview>
  <Form>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
jgmuRQAA</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageExport)
	{
		#TODO: Enter Validation Code here for Export Tab
		
		return $true
	}
	elseif ($tabPage -eq $tabpageDeploy)
	{
		#TODO: Enter Validation Code here for Deploy Tab
		
		return $true
	}
	elseif ($tabPage -eq $tabpageAudit)
	{
		#TODO: Enter Validation Code here for Audit Tab
		return $true
	}
	#Add more pages here
	
	return $true
}


#region Control Helper Functions
<#
	.SYNOPSIS
		Checks/Unchecks all resource nodes for a selected workload
	
	.DESCRIPTION
		Checks/Unchecks all resource nodes for a selected workload
	
	.PARAMETER WorkloadNode
		A description of the WorkloadNode parameter.
	
	.EXAMPLE
				PS C:\> Check-ResourceNodes -WorkloadNode $node
	
	.NOTES
		Additional information about the function.
#>
function Check-ResourceNodes
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true,
				   Position = 1)]
		[System.Windows.Forms.TreeNode]$WorkloadNode
	)
	$selectedNodeText = $WorkloadNode.Text
	$nodesChecked = $WorkloadNode.Checked
	
	if ($selectedNodeText -in $M365DSCWorkloads)
	{
		$resourceNodesArr = $resourcesListTree.Nodes[$WorkloadNode.Index].Nodes.GetEnumerator()
		
		foreach ($node in $resourceNodesArr)
		{
			$node.Checked = $nodesChecked
		}
	}
}

function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

<#
	.SYNOPSIS
		This function creates the M365DSC Resource Node List
	
	.DESCRIPTION
		This function creates a TreeView list of M365DSC resource nodes categorized by workload
	
	.PARAMETER $Resources
		A description of the $Resources parameter.
	
	.PARAMETER $Workloads
		A description of the $Workloads parameter.
	
	.EXAMPLE
				PS C:\> Build-ResourceNodeList -$Resources $resources -$Workloads $workloads
	
#>
function Build-ResourceNodeList
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true,Position = 1)]
		[System.Array]$Resources,
		
		[Parameter(Mandatory = $true,Position = 2)]
		[System.Array]$Workloads
	)
	
	#
	# TODO: Optimize this function using Array Lists instead of arrays and 
	#       remove unnecessary resourceMappings Array
	#
	# TODO: Add ToolTipText functionality for each node
	#
	
	# First generate the resource to workload mappings
	$resourceMappings = @()
	foreach ($resource in $Resources)
	{
		$resourceMappings += Get-M365DSCWorkload $resource
	}
	
	# Build workload nodes
	foreach ($workload in $Workloads)
	{
		# Add the parent workload
		$resourcesListTree.Nodes.Add($workload)
		
		# Add the children resources for the current parent workload
		foreach ($mapping in $resourceMappings)
		{
			if ($workload -eq $mapping.WorkloadName)
			{
				$workloadIndex = [array]::IndexOf($Workloads, $workload)
				$resourcesListTree.Nodes[$workloadIndex].Nodes.Add($mapping.Resource)
			}
		}
	}
}

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	#$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}


#endregion

#region General Events and Functions
$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting = [System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting = [System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if ($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for ($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if ($_.Cancel)
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$formM365DSCSnapshot_Load = {
	
	Update-NavButtons
	
	# Generate TreeView of Workloads and their respective resources
	Build-ResourceNodeList $M365DSCResources $M365DSCWorkloads
}

$tabcontrolWizard_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$buttonFinish_Click = {
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}
#endregion

#region Export Events and Functions
$exportUsernameBox_TextChanged = {
	Update-NavButtons
}



$labelExportUserName_Click = {
	#TODO: Place custom script here
	
}

$labelEnterO365TenantCreds_Click = {
	#TODO: Place custom script here
	
}

$buttonExportPath_Click = {
	# Display Export File Path Dialog
	if ($exportFilePathDialog.ShowDialog() -eq 'OK')
	{
		$exportConfigPathBox.Text = $exportFilePathDialog.SelectedPath
	}
}

$buttonExport_Click = {
	# Build ArrayList of Checked Nodes
	$checkedNodes = New-Object System.Collections.ArrayList
	Get-CheckedNode $resourcesListTree.Nodes $checkedNodes
	
	# Parse out workloads from the checkedNodes ArrayList
	$configComponents = New-Object System.Collections.ArrayList
	foreach ($node in $checkedNodes)
	{
		$currNodeStr = (($node.ToString()).Split(':')[1]).Trim()
		if (-not ($M365DSCWorkloads.Contains($currNodeStr)))
		{
			$configComponents.Add($currNodeStr)
		}
	}
	
	# Define M365 Config object
	$configName = $boxConfigName.Text
	$fileName = $configName + ".ps1"
	$configObj = [M365Config]::New($fileName, $configComponents, $configName, $exportConfigPathBox.Text)
	
	# Grab creds entered in Text Boxes
	$username = $exportUsernameBox.Text
	$password = $exportPasswordBox.Text | ConvertTo-SecureString -AsPlainText -Force
	
	# Build source tenant creds object
	$srcCreds = [System.Management.Automation.PSCredential]::new($username, $password)
	Write-Host $srcCreds.UserName + "  " + $srcCreds.Password
	$res = $configObj.Export($srcCreds)
}

$resourcesListTree_AfterCheck = [System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	# Toggle all resource nodes if a workload is selected
	Check-ResourceNodes $_.Node
}

$resourcesListTree_AfterSelect = [System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	#TODO: Place custom script here
	
}
#endregion

#region Deploy Tab Events and Functions
$buttonDeployConfig_Click = {
	#TODO: Add code to first compile specified config with supplied creds
	# 		and then deploy to destination tenant
	# Define M365 Config object
	$configFilePath = $textboxDeployConfigFilePath.Text
	$fileName = Split-Path $configFilePath -Leaf
	$configName = $fileName.Split(".")[0]
	
	# TODO2: Determine way to compile config w/o needing configComponents variable
	# TODO3: Test to ensure attributes are correctly populated for configObj
	$configDirectory = Split-Path $configFilePath -Parent
	$configObj = [M365Config]::New($fileName, $configComponents, $configName, $configDirectory)
	
	# Grab creds entered in Text Boxes
	$username = $textboxDeployUsername.Text
	$password = $textboxDeployPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	
}

$buttonDeployConfigPath_Click = {
	# Display Config File Dialog
	if ($deployConfigFilePickerDialog.ShowDialog() -eq 'OK')
	{
		$textboxDeployConfigFilePath.Text = $deployConfigFilePickerDialog.FileName
	}
}

#endregion

]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies />
</File>